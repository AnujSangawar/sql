--DDL – Data Definition Language
--DQL – Data Query Language
--DML – Data Manipulation Language
--DCL – Data Control Language
--TCL – Transaction Control Language

create database mechintech

use mechintech

--DDL – Data Definition Language
create table students(
roll_no int, --1,2,3
student_name varchar(15),--as123
subject_code int,
total_marks int,
passing_marks int,
internal_marks int,
obtain_marks int,
passing_status varchar(10))

select * from students

--DML – Data Manipulation Language
insert into students
values (101,'rohit',1234,100,40,20,20,''),
(102,'rahul',1234,100,40,18,21,''),
(103,'mohit',1234,100,40,20,25,''),
(104,'sharman',1234,100,40,20,40,''),
(101,'rohit',1235,100,40,19,30,''),
(102,'rahul',1235,100,40,16,23,''),
(103,'mohit',1235,100,40,20,55,''),
(104,'sharman',1235,100,40,20,50,''),
(101,'rohit',1236,100,40,20,30,''),
(102,'rahul',1236,100,40,20,33,''),
(103,'mohit',1236,100,40,20,15,''),
(104,'sharman',1236,100,40,20,20,''),
(101,'rohit',1235,100,40,18,60,''),
(102,'rahul',1235,100,40,16,53,''),
(103,'mohit',1235,100,40,20,45,''),
(104,'sharman',1235,100,40,18,70,'');

--DQL – Data Query Language
select * from students


--select limited columns

select roll_no,student_name from students

--show first 10 records using 'top'

select top 10 * from students
select top 10 student_name from students

--Questions
--create 5 different tables and insert data into it. Make sure table must have all the data types which we have learn.
--Insert values into tables.
-- Get all records from each table.
--select top 5 records from each table.
--select 2-3 columns from each table.

--day 2

--change data type of a column using alter
alter table students alter column subject_code varchar(10); --DDL, DDL data type should be compatible. If table is empty we can change from any datetype to any other data type
alter table students alter column subject_code int;

--add column
ALTER TABLE students ADD test varchar(10);

-- rename column
exec sp_rename 'students.test', 'test_rename'

--drop column
ALTER TABLE students DROP COLUMN test_rename;


--update
update students
set passing_status=0
--drop,delete,truncate
drop table students
delete table students
truncate table students

drop database students
delete database students
truncate database students

drop schema students
delete schema students
truncate schema students



--show records in ascending order using 'order by'

select * from students order by obtain_marks --asc/desc

--filter records with 'where' condition 

select * from students where student_name = 'sharman'

-- search records in particular pattern ussing 'like'

select * from students where student_name like '%rahul%' --exact matching
select * from students where student_name like 's%' --staring with s
select * from students where student_name like '%l' --ending with l


-- search unique records using 'distinct' 
select distinct roll_no from students

-- and,or,not,in,between

select * from students

select * from students where internal_marks=20 and obtain_marks=20 --and
select * from students where internal_marks=20 or obtain_marks=20 --or
select * from students where not obtain_marks = 20 --not
select * from students where obtain_marks in( 20,40,70) -- in
select * from students where obtain_marks between 20 and 50

-- group by
--The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".
--The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG())

select roll_no,count(roll_no) cnt from students group by roll_no

--having 
select roll_no,count(roll_no) from students group by roll_no having count(roll_no)>1

--update column values
update students
set passing_status=0


--aggregation (count,min,max,sum,avg)